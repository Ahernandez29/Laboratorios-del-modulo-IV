Practica 1: Instalar un servidor HTTP apache2

*Crear un website estatico html con la frase "Hola Mundo"	

1- Instalar httpd (apache2)
sudo dnf install httpd
sudo systemctl start httpd
sudo systemctl enable httpd

2- Crear archivo index.html
cd /var/www/html
sudo vi index.html 
-una vex en el archivo, agregar <h1>Hola mundo</h1>

- Guardar y salir.

*Crear un host virtual y ponerlo a escuchar por el puerto 80 y que al ingresar acceda al website anterior.


1- ir hacia el archivo httpd.conf
cd /etc/httpd/conf
sudo vi httpd.conf

- En el archivo, agregar los siguientes parametros:
<VirtualHost *:80>
DocumentRoot "/var/www/html"
</VirtualHost>

- guardar y salir.
- Reiniciar servicio
sudo systemctl restart httpd
- verificar en el navegador, escribiendo localhost:80

*Crear un website estatico html con su nombre, matricula y nombre de la materia.

cd /var/www/html
- crear carpeta que guardara otro archivo index.html (opcional)
sudo mkdir nombre de carpeta

- crear archivo index.html
sudo vi index.html

- Dentro del archivo, agregar lo siguiente:
<h1> "nombre" "matricula" </h1>

- guardar y salir.

*Crear un host virtual y ponerlo a escuchar por el puerto 8080 y que al ingresar acceda al website anterior.

cd /etc/httpd/conf
sudo vi httpd.conf

- Al final del archivo, agregar lo siguiente:
 
<VirtualHost *:8080>
DocumentRoot "/var/www/html/matricula"
</VirtualHost>

- Ir al parametron Listen y ponerlo a que escuche en el puerto 8080
- Ir al parametron DocumentRoot y agregarle la ruta que contiene el archivo:
DocumentRoot "/var/www/html/matricula"

-Reiniciar servicio httpd
sudo systemctl restart httpd

- En el navegador, poner localhost:8080

***********************************************************************

AGREGAR 2 VIRTUAL HOST PARA OFRECER 2 WEB STATICAS EN EL MISMO SERVIDOR HTTPD

1- CREAR LOS DIRECTORIOS Y ARCHIVOS HTML:
sudo mkdir -p /var/www/html/sitio80
sudo mkdir -p /var/www/html/sitio8080

- CREAR UN ARCHIVO DE PRUEBA PARA CADA SITIO WEB:
echo "<h1>Sitio desde puerto 80</h1>" | sudo tee /var/www/html/sitio80/index.html
echo "<h1>Sitio desde puerto 8080</h1>" | sudo tee /var/www/html/sitio8080/index.html

2- CREAR LOS ARCHIVOS DE CONFIGURACION VIRTUAL HOST PARA CADA SITIO WEB:
-VIRTUALHOST PARA EL PUERTO 80:
sudo nano /etc/httpd/conf.d/sitio80.conf

- agregar el siguiente contenido al archivo:
Listen 80
<VirtualHost *:80>
    ServerName localhost
    DocumentRoot "/var/www/html/sitio80"
    <Directory "/var/www/html/sitio80">
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>

-VIRTUALHOST PARA EL PUERTO 8080:
sudo nano /etc/httpd/conf.d/sitio8080.conf

- agregar el siguiente contenido:
Listen 8080

<VirtualHost *:8080>
    ServerName localhost
    DocumentRoot "/var/www/html/sitio8080"
    <Directory "/var/www/html/sitio8080">
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>

Nota: El Listen 8080 solo se necesita una vez en cualquier archivo de configuración. Si ya existe en otro lado, no lo repitas.

3- ABRIR LOS PUERTOS EN EL FIREWALL
sudo firewall-cmd --permanent --add-port=8080/tcp
sudo firewall-cmd --reload

4- REINICIAR APAHCE:
sudo systemctl restart httpd

5- VERIFICAR ESTATUS:
sudo systemctl status httpd

#################################################################33333
INSTALAR WORDPRESS
**************************************************
Upgrade system packages¶
Ensure your system's packages are up-to-date:


    sudo dnf upgrade -y
Install Apache¶
Apache is a web server that will serve your WordPress site. Install it with the following:


    sudo dnf install httpd -y
Enable Apache to start on boot¶
After installing Apache, enable it so it starts automatically on boot:


    sudo systemctl enable --now httpd
Install MariaDB¶
WordPress stores dynamic content in a MySQL database. MariaDB is an open source fork of MySQL. Install it with the following:


    sudo dnf install mariadb-server -y
Enable MariaDB server¶
After installing MariaDB, enable it so it starts automatically on boot:


    sudo systemctl enable --now mariadb
Secure MariaDB¶
Run the mysql_secure_installation script:


    sudo mysql_secure_installation --use-default
This script performs the following:

Sets a root password if one is not already set

Removes anonymous users

Disallows remote root login

Removes access to the test database

Reloads privileges

Install PHP¶
PHP is the programming used to interact with the MySQL database and perform dynamic actions. It is heavily used in WordPress core, themes, and plugins.

Install PHP and necessary packages to connect to MySQL:


    sudo dnf install php php-mysqlnd php-gd php-xml php-mbstring
After installing PHP, you must reload Apache to install it as an Apache module and read its configuration files:

Restart Apache¶

    sudo systemctl restart httpd
Fetch and unpack WordPress¶
Use curl do download the latest version of WordPress:


    curl -O https://wordpress.org/latest.tar.gz
Use tar to extract the downloaded archive:


    tar -xzvf latest.tar.gz
Copy the WordPress files to Apache's default public directory:


   sudo cp -r wordpress/* /var/www/html 
Set owner¶
Make Apache the owner of the files:


    sudo chown -R apache:apache /var/www/html/
Set permissions for the WordPress files:

Set permissions¶

    sudo chmod -R 755 /var/www/html/
Login to the MySQL cli:

Configure database¶

    sudo mysql -u root -p
Create a new database for your WordPress website:

Create a new database¶

    CREATE DATABASE LOCALDEVELOPMENTENV;
Create a user with a password for your database:

Note

It is highly recommended to use a stronger password.

Create a new user and password¶

    CREATE USER 'admin'@'localhost' IDENTIFIED BY 'password';
Grant all privileges to your WordPress database to the user you just created:


    GRANT ALL PRIVILEGES ON LOCALDEVELOPMENTENV.* TO 'admin'@'localhost';
Flush privileges to ensure the application of changes:


    FLUSH PRIVILEGES;
Exit the MySQL cli:


    EXIT;
Configure WordPress¶
Copy the wp-config-sample.php template and rename it:


    sudo cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
Open the wp-config.php file with your choice of text editor:


    sudo vi /var/www/html/wp-config.php
Replace database settings¶
You must define the following constants in your wp-config.php file:


    define ('DB_NAME', 'LOCALDEVELOPMENTENV');
    define ('DB_USER', 'admin');
    define ('DB_PASSWORD', 'password');
Configure firewall¶
Open up HTTP and HTTPS services in your firewall:


    sudo firewall-cmd --add-service=http --add-service=https
Reload firewalld to ensure changes to take effect:


    sudo systemctl reload firewalld
SELinux settings¶
To allow Apache read and write access to your WordPress files, run this command:


   chcon -R -t httpd_sys_rw_content_t /var/www/html/ 
To allow Apache to make network connections, run this command:

Note

The -P flag makes this configuration persistent across reboots


    setsebool -P httpd_can_network_connect true
